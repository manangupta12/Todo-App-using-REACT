{"version":3,"sources":["addTodo.js","listTodo.js","App.js","serviceWorker.js","index.js"],"names":["toast","configure","Todo","state","content","takeInput","e","setState","target","value","key","Math","random","submitButton","preventDefault","props","addTodo","info","position","POSITION","TOP_RIGHT","autoClose","placeholder","onChange","this","className","onClick","alt","src","Component","ListTodo","todos","deleteTodo","todolist","map","todo","App","todoCopy","swal","title","text","icon","buttons","dangerMode","then","willDelete","filter","t","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0PAGAA,IAAMC,Y,IAkCSC,E,4MA/BXC,MAAQ,CACJC,QAAU,I,EAEdC,UAAY,SAACC,GACT,EAAKC,SAAS,CACVH,QAAUE,EAAEE,OAAOC,MACnBC,IAAMC,KAAKC,Y,EAGnBC,aAAe,SAACP,GACZA,EAAEQ,iBACwB,KAAvB,EAAKX,MAAMC,SACV,EAAKW,MAAMC,QAAQ,EAAKb,OACxB,EAAKI,SAAS,CACVH,QAAU,MAIdJ,IAAMiB,KAAK,iCAAiC,CAACC,SAAUlB,IAAMmB,SAASC,UAAUC,UAAU,O,uDAI9F,OACI,8BACI,2BAAOC,YAAc,oBAAoBC,SAAYC,KAAKnB,UAAWI,MAASe,KAAKrB,MAAMC,UACzF,4BAAQqB,UAAU,sDAAsDC,QAAWF,KAAKX,cAAc,yBAAKc,IAAM,GAAGC,IAAI,2D,GA3BrHC,aCwBJC,EA1BE,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,MAAMC,EAAgB,EAAhBA,WACjBC,EAAWF,EAAMG,KAAI,SAAAC,GACrB,OACI,yBAAKV,UAAY,WAAWf,IAAOyB,EAAKzB,KACxC,yBAAKe,UAAU,OACX,yBAAKA,UAAU,cACf,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,2BACf,0BAAMA,UAAU,eAChB,2BAAIU,EAAK/B,QAAQ,4BAAQsB,QAAW,kBAAMM,EAAWG,EAAKzB,MAC1De,UAAU,wDACV,uBAAGA,UAAU,wBAAb,UAFiB,mBAUjC,OACI,yBAAKA,UAAU,SACVQ,I,gBCqCEG,E,4MAtDbjC,MAAQ,CACNgC,KAAO,CACH,CACE/B,QAAU,uBACVM,IAAM,GAER,CACEN,QAAU,iBACVM,IAAM,K,EAIdM,QAAU,SAACmB,GACT,IAAIE,EAAQ,sBAAO,EAAKlC,MAAMgC,MAAlB,CAAuBA,IAEnC,EAAK5B,SAAS,CACZ4B,KAAOE,K,EAGXL,WAAa,SAACtB,GACZ4B,IAAK,CACHC,MAAO,gBACPC,KAAM,mCACNC,KAAM,UACNC,QAAS,CAAC,SAAU,UACpBC,YAAY,IAEbC,MAAK,SAACC,GACL,GAAIA,EAAY,CACd,IAAIV,EAAO,EAAKhC,MAAMgC,KAAKW,QAAO,SAACC,GAAD,OAAOA,EAAErC,MAAQA,KAEnD,EAAKH,SAAS,CACZ4B,SAEFG,IAAK,oCAAqC,CACxCG,KAAM,iBAGRH,IAAK,2B,uDAKT,OACE,yBAAKb,UAAU,OACb,yBAAKA,UAAY,aACf,kBAAC,EAAD,CAAOM,MAASP,KAAKrB,MAAMgC,KAAMH,WAAcR,KAAKQ,aACpD,kBAAC,EAAD,CAAShB,QAAWQ,KAAKR,gB,GAhDjBa,aCOEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.05f303da.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {toast} from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\ntoast.configure()\nclass Todo extends Component{\n    \n    state = {\n        content : ''\n    }\n    takeInput = (e) => {\n        this.setState({\n            content : e.target.value,\n            key : Math.random()\n        })\n    };\n    submitButton = (e) => {\n        e.preventDefault()\n        if(this.state.content !== ''){\n            this.props.addTodo(this.state);\n            this.setState({\n                content : \"\"\n            })\n        }\n        else{\n            toast.info('You need to add a task first !',{position: toast.POSITION.TOP_RIGHT,autoClose:3000})\n        }\n    }\n    render(){\n        return(\n            <form>\n                <input placeholder = \"Add Todos here !!\" onChange = {this.takeInput} value = {this.state.content} />\n                <button className=\"btn-floating btn-large waves-effect waves-light red\" onClick = {this.submitButton}><img alt = \"\" src=\"https://img.icons8.com/bubbles/50/000000/add.png\"/></button>\n            </form>\n        )\n    }\n}\n\nexport default Todo","import React from 'react';\n\nconst ListTodo = ({todos,deleteTodo}) => {\n    var todolist = todos.map(todo=>{\n        return(\n            <div className = \"todolist\" key = {todo.key}>\n            <div className=\"row\">\n                <div className=\"col s12 m6\">\n                <div className=\"card red darken-1\">\n                    <div className=\"card-content white-text\">\n                    <span className=\"card-title\"></span>\n                    <p>{todo.content}<button onClick = {() => deleteTodo(todo.key)} \n                    className=\"btn-floating btn-large waves-effect waves-light grey\">\n                    <i className=\"material-icons right\">delete</i>Delete</button></p>\n                    </div>\n                </div>\n                </div>\n            </div>\n            </div>\n        )\n    })\n    return(\n        <div className=\"todos\">\n            {todolist}\n        </div>\n    )\n}\n\nexport default ListTodo","import React, { Component } from 'react';\nimport AddTodo from \"./addTodo\"\nimport Todos from \"./listTodo\"\nimport swal from 'sweetalert';\n\nclass App extends Component {\n  state = {\n    todo : [\n        {\n          content : \"Learn React Native !\",\n          key : 1\n        },\n        {\n          content : \"Learn Django !\",\n          key : 2\n        }\n      ]\n  }\n  addTodo = (todo) => {\n    var todoCopy = [...this.state.todo,todo]\n    \n    this.setState({\n      todo : todoCopy\n    })\n  }\n  deleteTodo = (key) => {\n    swal({\n      title: \"Are you sure?\",\n      text: \"You're trying to delete a task !\",\n      icon: \"warning\",\n      buttons: [\"Cancel\", \"Delete\"],\n      dangerMode: true,\n    })\n    .then((willDelete) => {\n      if (willDelete) {\n        let todo = this.state.todo.filter((t) => t.key !== key);\n    \n        this.setState({\n          todo\n        })\n        swal(\"Poof! Your task has been deleted!\", {\n          icon: \"success\",\n        });\n      } else {\n        swal(\"Your task is safe !\");\n      }\n    });\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <div className = \"container\">\n          <Todos todos = {this.state.todo} deleteTodo = {this.deleteTodo} />\n          <AddTodo addTodo = {this.addTodo} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}